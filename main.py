import os
import json
import requests

# Add dotenv for local development
if not os.getenv("GITHUB_ACTIONS"):
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("python-dotenv not installed. Install it for local development.")

from ai_reviewer.openai import review_diff_with_openai

# AI comment signature (global)
AI_COMMENT_SIGNATURE = "*This comment was generated by AI. Please review and update as needed.*"


def upsert_pr_comment(pr_data: dict, message: str):
    token = os.getenv("GITHUB_TOKEN")
    comments_url = pr_data.get("comments_url")

    if not comments_url or not token:
        print("‚ùå Missing comments URL or GitHub token.")
        return

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github+json",
    }

    full_message = f"{message}\n\n{AI_COMMENT_SIGNATURE}"

    # Step 1: Fetch existing comments
    print("üîç Checking for existing AI comments...")
    existing_comments = requests.get(comments_url, headers=headers).json()

    ai_comment = next((c for c in existing_comments if c["user"]["login"] == os.getenv("GITHUB_ACTOR") and c["body"].strip().endswith(AI_COMMENT_SIGNATURE)), None)

    if ai_comment:
        # Step 2: Update existing AI comment
        comment_id = ai_comment["id"]
        update_url = f"{comments_url.rsplit('/', 2)[0]}/comments/{comment_id}"
        resp = requests.patch(update_url, headers=headers, json={"body": full_message})
        if resp.status_code == 200:
            print("üîÑ Updated existing AI comment.")
        else:
            print(f"‚ùå Failed to update comment: {resp.status_code} - {resp.text}")
    else:
        # Step 3: Post new comment
        resp = requests.post(comments_url, headers=headers, json={"body": full_message})
        if resp.status_code == 201:
            print("‚úÖ Posted new AI comment.")
        else:
            print(f"‚ùå Failed to post new comment: {resp.status_code} - {resp.text}")



def main():
    event_path = os.getenv("GITHUB_EVENT_PATH")
    if not event_path:
        print("GITHUB_EVENT_PATH is not set.")
        return

    with open(event_path, 'r') as f:
        event_data = json.load(f)

    pr_data = event_data.get("pull_request")
    if not pr_data:
        print("No 'pull_request' data found in the event payload.")
        return

    title = pr_data.get("title", "N/A")
    diff_url = pr_data.get("diff_url", "N/A")

    print(f"üì• Fetching diff... {diff_url}")
    diff_resp = requests.get(diff_url, headers={"Accept": "application/vnd.github.v3.diff"})
    if diff_resp.status_code != 200:
        print(f"‚ùå Failed to fetch diff: {diff_resp.status_code}")
        return

    diff_text = diff_resp.text
    print(f"‚úÖ Diff fetched ({len(diff_text.splitlines())} lines)")

    print("üß† Sending to OpenAI...")
    ai_response = review_diff_with_openai(f"PR Title: {title}\n\n{diff_text}")

    print("üí¨ AI Review Response:")
    print(ai_response)

    upsert_pr_comment(pr_data, ai_response)


if __name__ == "__main__":
    main()
